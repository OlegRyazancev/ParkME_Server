type Query{

    #    userController
    userById(id: ID): User
    carsByUserId(id: ID): [Car]
    reservationsByUserId(id: ID): [Reservation]

    #    zoneController
    zones: [Zone]
    zoneById(id: ID): Zone
    placesByZoneId(id: ID): [Place]
    freePlacesByZoneId(id: ID): [Place]


    #    carController
    carById(id: ID): Car

    #    adminController
    reservationInfoById(id: ID): ReservationInfo
    placeById(id:ID): Place
    cars: [Car]
    users: [User]
    reservations: [Reservation]
}

type Mutation {
    #    userController
    createCar(id:ID dto: InputCar): Car
    makeReservation(dto: InputReservationInfo): Reservation
    updateUser (dto: InputUser): User
    deleteUser(id: ID): Boolean

    #    reservationController
    changeTimeTo(dto: InputReservation): Reservation
    deleteReservation(id: ID): Boolean

    #    carController
    updateCar(dto: InputCar): Car
    deleteCar(id: ID): Boolean

    #    adminController
    createZone(dto: InputZone): Zone
    createPlaceInZoneById(id: ID dto:InputPlace): Place
    updateZone(dto: InputZone): Zone
    changePlaceStatusById(id: ID status: String): Place
    deleteZoneAndAssociatedPlaces(id: ID): Boolean
    deletePlaceById(id: ID): Boolean
}